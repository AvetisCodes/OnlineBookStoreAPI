Build a ASN.NET Web API application with the following endpoints:

AuthController
- /api/Auth/Register [POST]
	- Uses UserManager<User> for registration
	- Takes RegisterDTO
- /api/Auth/Login [POST]
	- Uses SignInManager<User> for login 
	- Takes LoginDTO

BooksController
- /api/Books/TopBooks/{topNumber} [GET]
	- Takes topNumber as integer and can be >= 1 and <= 5
	- Top books are based on the amount of reviews and the average review count. So average review number of a single book multiplied by its actual review count would give a score and based on that given amount of top books would be returned
	- Perform TopBook logic in a separate service called BookService and use DI to inject into BooksController
- /api/Books/{id} [GET]
	- Gets the given book or returns NotFound

OrdersController
- /api/Orders/MyOrders [GET] [Authorize]
	- If user is not logged in return unauthorized
	- Otherwise return all of the orders of the logged in user
- /api/Orders/MyOrders [POST] [Authorize]
	- Takes OrderDTO
	- If user is not logged in return unauthorized
	- Calculate total price based on book price and orderDetail quantity 

ReviewsController
- /api/Reviews/Book/{bookId} [GET] (Book)
	- Takes bookId as Guid
	- If given book does not exist return NotFound
	- If book is found return book reviews
- /api/Reviews/MyReviews [GET] [Authorize]
	- If user is not logged in return unauthorized
	- If authorized then return reviews of the logged in user
- /api/Reviews/MyReviews/{bookId} [POST] [Authorize]
	- If user is not logged in return unauthorized
	- Takes bookId as Guid
	- Takes ReviewDTO
	- Rating can only be between 1 and 5
	- Make sure book being reviewed exists otherwise return NotFound
	- If all is valid save user review and return saved review
- /api/Reviews/{Id} [DELETE] [Authorize]
	- If user is not logged in return unauthorized
	- Takes reviewId as Guid
	- If review is not found return NotFound
	- If logged in user is not the one who left the review return Forbid

More information
- Use EF Core database first approach. Define entity relationships in the DBContext however also create table definitions for each entity.
- There will be 5 models:
	- Book
		- Id (Guid)
		- Title
		- Author
		- ISBN
		- Price
		- OrderDetails (EF Core Navigational property, not present in SQL object)
		- Reviews (EF Core Navigational property, not present in SQL object)
	- Order
		- Id (Guid)
		- UserId
		- OrderDate
		- TotalPrice
		- User (EF Core Navigational property, not present in SQL object)
		- OrderDetails (EF Core Navigational property, not present in SQL object)
	- OrderDetails
		- Id (Guid)
		- OrderId
		- BookId
		- Quantity
		- Book (EF Core Navigational property, not present in SQL object)
		- Order (EF Core Navigational property, not present in SQL object)
	- Review
		- Id (Guid)
		- BookId
		- UserId
		- Rating
		- Text
		- Book (EF Core Navigational property, not present in SQL object)
		- User (EF Core Navigational property, not present in SQL object)
	- User (inherits from Identity<Guid>)
		- Orders (EF Core Navigational property, not present in SQL object)
		- Reviews (EF Core Navigational property, not present in SQL object)
- Write SQLite Create script for 5 entities listed above:
	- Also build these 3 tables which are not going to be domain models:
		- UserRoles
			- UserId
			- RoleId
		- UserClaims
			- Id (Guid)
			- UserId
			- ClaimTtpe
			- ClaimValue
		- Roles
			- Id (Guid)
			- Name
			- NormalizedName
			- ConcurrencyStamp
- There will be 5 DTOs
	- LoginDTO
		- Email [Required]
		- Password [Required]
	- OrderDetailDTO
		- BookId [Guid]
		- Quantity
	- OrderDTO
		- OrderDate
		- OrderDetailDTOs
	- RegisterDTO
		- Email [Required]
		- Password, [Required] [Min = 6, Max = 100]
		- ConfirmPassword [Needs to match to password]
	- ReviewDTO
		- Rating [Required] [Range(1, 5)]
		- Text
- Add authentication for this API and use application cookie which lasts for 60 minutes